"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullLogger = exports.createLogger = exports.getLogger = void 0;
const winston_1 = __importStar(require("winston")); // Import Winston
const lib_1 = require("../../lib");
let defaultLogger;
let cachedLogger;
function getLogger(config) {
    const configuration = lib_1.CamundaEnvironmentConfigurator.mergeConfigWithEnvironment(config ?? {});
    // We assume that the SDK user uses a single winston instance for 100% of logging, or no logger at all (in which case we create our own)
    if (config?.logger && cachedLogger !== config.logger) {
        cachedLogger = config.logger;
        config.logger.debug(`Using supplied logger`);
    }
    if (!defaultLogger) {
        // Define the default logger
        const logger = createLogger({
            level: configuration.CAMUNDA_LOG_LEVEL,
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.colorize(), winston_1.default.format.simple()),
            transports: [new winston_1.default.transports.Console()],
        });
        defaultLogger = logger;
    }
    if (!cachedLogger) {
        defaultLogger.debug(`Using default winston logger`);
        cachedLogger = defaultLogger;
    }
    return config?.logger ?? defaultLogger;
}
exports.getLogger = getLogger;
function createLogger(options) {
    const logger = winston_1.default.createLogger(options); // eslint-disable-line @typescript-eslint/no-explicit-any
    logger.trace = logger.silly;
    return logger;
}
exports.createLogger = createLogger;
exports.NullLogger = createLogger({
    transports: [new winston_1.transports.Console({ silent: true })],
});
//# sourceMappingURL=C8Logger.js.map