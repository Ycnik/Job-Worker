import { BeforeErrorHook, HandlerFunction, Method } from 'got';
import { CamundaPlatform8Configuration } from './Configuration';
/**
 *
 * This function stores the call point from the application of got requests.
 * This enables users to see where the error originated from.
 */
export declare const beforeCallHook: HandlerFunction;
/**
 * This function adds the call point to the error stack trace of got errors.
 * This enables users to see where the error originated from.
 *
 * It also logs the error to the Camunda Support log.
 * This is useful for debugging and support purposes.
 */
export declare const gotBeforeErrorHook: (config: CamundaPlatform8Configuration) => BeforeErrorHook;
/**
 *
 * This function is used on a 401 response to retry the request with a new token, one single time.
 * https://github.com/camunda/camunda-8-js-sdk/issues/125
 */
export declare const makeBeforeRetryHandlerFor401TokenRetry: (getHeadersFn: any) => (context: any) => Promise<void>;
export declare const GotRetryConfig: {
    limit: number;
    methods: Method[];
    statusCodes: number[];
};
