import { CamundaPlatform8Configuration, DeepPartial } from '../../lib';
import { IHeadersProvider } from '../../oauth';
import * as Dto from './AdminDto';
/**
 * This class provides methods to interact with the Camunda Admin API.
 * @throws {RESTError} An error that may occur during API operations.
 */
export declare class AdminApiClient {
    private userAgentString;
    private oAuthProvider;
    private rest;
    constructor(options?: {
        config?: DeepPartial<CamundaPlatform8Configuration>;
        oAuthProvider?: IHeadersProvider;
    });
    private getHeaders;
    /**
     *
     * Get an array of the current API clients for this cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClients) for more details.
     * @throws {RESTError}
     * @param clusterUuid - The cluster UUID
     *
     */
    getClients(clusterUuid: string): Promise<Dto.ClusterClient[]>;
    /**
     * Create a new API client for a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateClient) for more details.
     * @throws {RESTError}
     */
    createClient(req: {
        clusterUuid: string;
        clientName: string;
        permissions: string[];
    }): Promise<Dto.CreatedClusterClient>;
    /**
     * Get the details of an API client. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClient) for more details.
     * @param clusterUuid
     * @param clientId
     * @throws {RESTError}
     * @returns
     */
    getClient(clusterUuid: string, clientId: string): Promise<Dto.ClusterClientConnectionDetails>;
    /**
     * See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteClient) for more details.
     * @param clusterUuid
     * @param clientId
     * @throws {RESTError}
     */
    deleteClient(clusterUuid: string, clientId: string): Promise<null>;
    /**
     *
     * Return an array of clusters. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetClusters) for more details.
     * @throws {RESTError}
     */
    getClusters(): Promise<Dto.Cluster[]>;
    /**
     *
     * Create a new cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateCluster) for more details.
     * @throws {RESTError}
     */
    createCluster(createClusterRequest: Dto.CreateClusterBody): Promise<{
        clusterId: string;
    }>;
    /**
     *
     * Retrieve the metadata for a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetCluster) for more details.
     * @throws {RESTError}
     *
     */
    getCluster(clusterUuid: string): Promise<Dto.Cluster>;
    /**
     *
     * Delete a cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteCluster) for more details.
     * @throws {RESTError}
     *
     */
    deleteCluster(clusterUuid: string): Promise<null>;
    /**
     *
     * Retrieve the available parameters for cluster creation. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetParameters) for more details.
     * @throws {RESTError}
     */
    getParameters(): Promise<Dto.Parameters>;
    /**
     *
     * Retrieve the connector secrets. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/GetSecrets) for more details.
     * @throws {RESTError}
     */
    getSecrets(clusterUuid: string): Promise<{
        [key: string]: string;
    }>;
    /**
     *
     * Create a new connector secret. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/CreateSecret) for more details.
     * @throws {RESTError}
     */
    createSecret({ clusterUuid, secretName, secretValue, }: {
        clusterUuid: string;
        secretName: string;
        secretValue: string;
    }): Promise<null>;
    /**
     *
     * Delete a connector secret. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/DeleteSecret) for more details.
     * @throws {RESTError}
     */
    deleteSecret(clusterUuid: string, secretName: string): Promise<null>;
    /**
     *
     * Add one or more IPs to the whitelist for the cluster. See [the API Documentation](https://console.cloud.camunda.io/customer-api/openapi/docs/#/default/UpdateIpWhitelist) for more details.
     * @throws {RESTError}
     * @param ipwhitelist
     * @returns
     */
    whitelistIPs(clusterUuid: string, ipwhitelist: [
        {
            description: string;
            ip: string;
        }
    ]): Promise<null>;
    /**
     *
     * Retrieve a list of members and pending invites for your organisation. See the [API Documentation]() for more details.
     * @throws {RESTError}
     */
    getUsers(): Promise<Dto.Member[]>;
    /**
     *
     * Add a member. See the [API Documentation]() for more details.
     * @throws {RESTError}
     *
     */
    createMember(email: string, orgRoles: Dto.OrganizationRole[]): Promise<null>;
    /**
     *
     * Delete a member from your organization. See the [API Documentation]() for more details.
     * @throws {RESTError}
     *
     */
    deleteMember(email: string): Promise<null>;
}
